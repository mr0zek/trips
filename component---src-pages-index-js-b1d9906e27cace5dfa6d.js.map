{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/components/BlogPage/blogPage.js","webpack:///./src/pages/index.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","Helmet","htmlAttributes","titleTemplate","name","content","property","concat","defaultProps","BlogPage","posts","allMarkdownRemark","nodes","gruppedPosts","forEach","f","key","undefined","frontmatter","date","Date","getFullYear","push","Object","keys","sort","reverse","map","year","class","post","fields","slug","featuredImage","publicURL","tags","to","style","backgroundImage","tag","BlogIndex"],"mappings":"+JAYMA,EAAM,SAAC,GAAwC,IAAD,EAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,EAASC,YAAe,cAAxBD,KAaFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBJ,MAExC,OACE,kBAACM,EAAA,OAAD,CACEC,eAAgB,CACdT,QAEFE,MAAOA,EACPQ,cAAeH,EAAY,QAAWA,EAAiB,KACvDN,KAAM,CACJ,CACEU,KAAK,cACLC,QAASP,GAEX,CACEQ,SAAS,WACTD,QAASV,GAEX,CACEW,SAAS,iBACTD,QAASP,GAEX,CACEQ,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,gBACLC,QAASV,GAEX,CACES,KAAK,sBACLC,QAASP,IAEXS,OAAOb,MAKfH,EAAIiB,aAAe,CACjBf,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,QCHAkB,EA7EE,WACf,IA0BMC,EA1BOb,YAAe,cA0BTc,kBAAkBC,MAC/BC,EAAe,GAcrB,OAbAH,EAAMI,SAAQ,SAAAC,GACZ,IAAIC,EAAM,aACiBC,IAAvBF,EAAEG,YAAYC,MAA6C,OAAvBJ,EAAEG,YAAYC,OACpDH,EAAM,IAAII,KAAKL,EAAEG,YAAYC,MAAME,oBAEXJ,IAAtBJ,EAAaG,GACfH,EAAaG,GAAO,CAACD,GAGrBF,EAAaG,GAAKM,KAAKP,MAKzBQ,OAAOC,KAAKX,GAAcY,OAAOC,UAAUC,KAAI,SAAAC,GAC7C,OACE,6BACE,4BAAKA,GACL,wBAAIC,MAAM,0BACPhB,EAAae,GAAMD,KAAI,SAAAG,GAAS,IAAD,EACxBnC,EAAQmC,EAAKZ,YAAYvB,OAASmC,EAAKC,OAAOC,KAC9CC,EAAa,UAAGH,EAAKZ,YAAYe,qBAApB,aAAG,EAAgCC,UAChDC,EAAOL,EAAKZ,YAAYiB,KACxBhB,EAAOW,EAAKZ,YAAYC,KAE9B,OACE,4BACE,yBAAKU,MAAM,aACT,kBAAC,IAAD,CAAMO,GAAIN,EAAKC,OAAOC,KAAMH,MAAM,kBAAkBQ,MAAO,CAAEC,gBAAgB,OAAQL,EAAT,OAE5E,yBAAKJ,MAAM,kBACRM,aADH,EACGA,EAAMR,KAAI,SAAAY,GAAS,OAAQ,kBAAC,IAAD,CAAMH,GAAI,SAAWG,EAAKV,MAAM,OAAhC,KAA6CU,MACzE,kBAAC,IAAD,CAAMH,GAAIN,EAAKC,OAAOC,KAAMH,MAAM,kBAChC,wBAAIA,MAAM,mBAAmBlC,EAA7B,IAA8C,OAATwB,GAAiB,IAAMA,EAAO,IAAnE,kBCnDTqB,UATG,WAChB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAK7C,MAAM,cACX,kBAAC,EAAD","file":"component---src-pages-index-js-b1d9906e27cace5dfa6d.js","sourcesContent":["/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.com/docs/use-static-query/\r\n */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ description, lang, meta, title }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description            \r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from \"react\"\r\nimport { Link, graphql, useStaticQuery } from \"gatsby\"\r\n\r\nconst BlogPage = () => {\r\n  const data = useStaticQuery(graphql`\r\n        query {            \r\n            allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n              nodes {\r\n                  fields {\r\n                      slug\r\n                  }\r\n                  frontmatter {\r\n                      date(formatString: \"YYYY-MM-DD\")\r\n                      title\r\n                      description  \r\n                      tags                      \r\n                      featuredImage {\r\n                        childImageSharp {\r\n                          sizes(maxWidth: 630) {\r\n                            ...GatsbyImageSharpSizes\r\n                          }                                                  \r\n                        }                      \r\n                        publicURL\r\n                      }           \r\n                  }              \r\n              }\r\n            }\r\n        }\r\n    `)\r\n\r\n  const posts = data.allMarkdownRemark.nodes\r\n  const gruppedPosts = {}\r\n  posts.forEach(f => {\r\n    let key = \"Plany\"\r\n    if (f.frontmatter.date !== undefined && f.frontmatter.date !== null) {\r\n      key = new Date(f.frontmatter.date).getFullYear()\r\n    }\r\n    if (gruppedPosts[key] === undefined) {\r\n      gruppedPosts[key] = [f]\r\n    }\r\n    else {\r\n      gruppedPosts[key].push(f)\r\n    }\r\n  })\r\n\r\n  return (\r\n    Object.keys(gruppedPosts).sort().reverse().map(year => {\r\n      return (\r\n        <div>\r\n          <h2>{year}</h2>\r\n          <ol class=\"post-card-box clearfix\">\r\n            {gruppedPosts[year].map(post => {\r\n              const title = post.frontmatter.title || post.fields.slug\r\n              const featuredImage = post.frontmatter.featuredImage?.publicURL\r\n              const tags = post.frontmatter.tags\r\n              const date = post.frontmatter.date\r\n\r\n              return (\r\n                <li>\r\n                  <div class=\"post-card\">\r\n                    <Link to={post.fields.slug} class=\"post-card-image\" style={{ backgroundImage: `url(${featuredImage})` }}>\r\n                    </Link>\r\n                    <div class=\"post-card-body\">\r\n                      {tags?.map(tag => { return (<Link to={\"/tags#\" + tag} class=\"tag\">|&#32;{tag}</Link>) })}\r\n                      <Link to={post.fields.slug} class=\"post-card-link\">\r\n                        <h3 class=\"post-card-title\">{title} {date !== null && \"(\" + date + \")\"} </h3>\r\n                      </Link>\r\n                    </div>\r\n                  </div>\r\n                </li>\r\n              )\r\n            })}\r\n          </ol>\r\n        </div>\r\n      )\r\n    })\r\n  )\r\n}\r\n\r\n\r\nexport default BlogPage ","import React from \"react\"\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\nimport BlogPage from \"../components/BlogPage/blogPage\"\r\n\r\nconst BlogIndex = () => {\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"All posts\" />\r\n      <BlogPage />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogIndex"],"sourceRoot":""}